# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
head(H3K27ac)
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
library(GenomicRanges)
library(devtools)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
head(H3K27ac)
#hg19 annotation
ld1 = read_csv("./gwas_lead_snps.txt")
#hg19 annotation
gwas_snps = read_csv("./gwas_lead_snps.txt")
#hg19 annotation
gwas_snps = read_tsv("./gwas_lead_snps.txt")
length(gwas_snps$chr)
length(gwas_snps$rs_id)
length(gwas_snps$chr)
gwas_snps$chr
ld1 = proxysnps::get_proxies(query = gwas_snps$rs_id)
install.packages("myvariant")
install.packages(haploR, dependencies = TRUE)
install.packages("haploR", dependencies = TRUE)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
library(GenomicRanges)
library(devtools)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
library(tidyverse)
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
library(GenomicRanges)
library(devtools)
install.packages("haploR", dependencies = TRUE)
library(haploR)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
setwd("~/Work/osteoblast_project/cheryls_data/")
library(tidyverse)
library("preprocessCore")
#install.packages("GGally")
library(GGally)
library(WGCNA)
cluster_labels = read_csv("./GSE54461_OB_RNA_SEQ_RAW/purple_cluster_trx_label_mart.csv")
colnames(cluster_labels) = c("Gene.ID", "cluster", "Transcript.ID", "gene_name")
purple = read_csv("../wgcna_network/signed_network/MM_gwas_trx_purple.csv")
cluster_trx = merge(purple, cluster_labels, by = "Transcript.ID")
cluster_trx
setwd("~/Work/osteoblast_project/cheryls_data/")
write.csv(cluster_trx, "./purple_trx_with_cluster.csv")
#### Loading in expression matrix ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 42 strains x 55262 transcripts
load("~/Work/osteoblast_project/wgcna_network/exp_by_strain_29k.Rdata")
exp_by_strain <- exp_by_strain_29k
rownames(exp_by_strain) <- exp_by_strain$strain
exp_by_strain <- exp_by_strain[,-1]
exp_by_strain[1:5,1:5]
### The output has undergone vst and PEER batch correction
### Here we are doing a quantile normalization, which generally removes
### experimental noise, but the strain differencens remain
norm_exp_by_strain <- normalize.quantiles(as.matrix(exp_by_strain))
colnames(norm_exp_by_strain) <- colnames(exp_by_strain)
rownames(norm_exp_by_strain) <- rownames(exp_by_strain)
norm_exp_by_strain[1:5,1:5]
head(colnames(norm_exp_by_strain), 20)
norm_exp_by_strain <- as.data.frame(norm_exp_by_strain)
trx_info <- read.csv("~/Work/osteoblast_project/wgcna_network/trx_mart_export.txt")
head(trx_info)
trx_info_29k <- subset(trx_info, trx_info$Transcript.ID %in% colnames(exp_by_strain))
trx <- (trx_info_29k$Associated.Gene.Name == "Runx2")
subset(trx, trx == TRUE)
# 13883 of 28722 genes are unqiue gene IDs
#### Generate meta data table ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
load('~/Work/osteoblast_project/wgcna_network/all_pheno.Rdata')
colnames(all_pheno) <- c('mmAR', 'particle_counts', 'total_area', 'average_size', 'percent_area',
'circularity', 'solidity', 'fivetotwenty', 'weight', 'age', 'cell_yield')
all_pheno$strains <- rownames(all_pheno)
rownames(norm_exp_by_strain) = exp_by_strain_29k$strain
only_42 <- rownames(norm_exp_by_strain)
head(all_pheno)
all_pheno <- subset(all_pheno, all_pheno$strains %in% only_42)
datTraits <- all_pheno
head(datTraits)
cluster_trx$cluster = as.factor(cluster_trx$cluster)
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.25) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
trx_1 = subset(cluster_trx, cluster == 1)
trx_2 = subset(cluster_trx, cluster == 2)
mean(cluster_trx$MMpurple)
t.test(trx_1$MMpurple, trx_2$MMpurple)
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.7) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5, colour = cluster) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5, aes(colour = cluster)) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.45) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.40) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
setwd('~/Work/osteoblast_project/wgcna_network/')
#### Dependencies ####
#install.packages("tidyverse")
library(tidyverse)
library(GEOquery)
library(limma)
library(scales)
#source("http://bioconductor.org/biocLite.R")
#biocLite("WGCNA")
library(WGCNA)
#install.packages("devtools")
library(devtools)
#install.packages("corrplot")
library(corrplot)
#install.packages("fdrtool")
library(fdrtool)
#source("http://bioconductor.org/biocLite.R")
#biocLite("preprocessCore")
library("preprocessCore")
library(biomaRt)
#### Loading in expression matrix ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 42 strains x 55262 transcripts
load("~/Work/osteoblast_project/wgcna_network/exp_by_strain_29k.Rdata")
exp_by_strain <- exp_by_strain_29k
rownames(exp_by_strain) <- exp_by_strain$strain
exp_by_strain <- exp_by_strain[,-1]
exp_by_strain[1:5,1:5]
### The output has undergone vst and PEER batch correction
### Here we are doing a quantile normalization, which generally removes
### experimental noise, but the strain differencens remain
norm_exp_by_strain <- normalize.quantiles(as.matrix(exp_by_strain))
colnames(norm_exp_by_strain) <- colnames(exp_by_strain)
rownames(norm_exp_by_strain) <- rownames(exp_by_strain)
norm_exp_by_strain[1:5,1:5]
head(colnames(norm_exp_by_strain), 20)
norm_exp_by_strain <- as.data.frame(norm_exp_by_strain)
trx_info <- read.csv("~/Work/osteoblast_project/wgcna_network/trx_mart_export.txt")
head(trx_info)
trx_info_29k <- subset(trx_info, trx_info$Transcript.ID %in% colnames(exp_by_strain))
trx <- (trx_info_29k$Associated.Gene.Name == "Runx2")
subset(trx, trx == TRUE)
length(trx_info_29k$Associated.Gene.Name)
length(unique(trx_info_29k$Associated.Gene.Name))
# 13883 of 28722 genes are unqiue gene IDs
norm_exp_by_strain
norm_exp_by_strain[1:5,1:5]
select(norms_exp_by_strain, "ENSMUST00000114548")
select(norm_exp_by_strain, "ENSMUST00000114548")
which(colnames(norm_exp_by_strain) == "ENSMUST00000114548")
which(colnames(norm_exp_by_strain) == "	ENSMUST00000032710")
which(colnames(norm_exp_by_strain) == "ENSMUST00000032710")
which(colnames(norm_exp_by_strain) == "ENSMUST00000207945")
which(colnames(norm_exp_by_strain) == "ENSMUST00000208597")
which(colnames(norm_exp_by_strain) == "ENSMUST00000207375")
which(colnames(norm_exp_by_strain) == "ENSMUST00000032710")
norm_exp_by_strain[1:5,1:5]
bgig <- read_csv("~/Work/osteoblast_project/wgcna_network/bmd_gwas_implicated_genes.csv")
head(bgig)
setwd('~/Work/osteoblast_project/wgcna_network/')
#### Dependencies ####
#install.packages("tidyverse")
library(tidyverse)
library(GEOquery)
library(limma)
library(scales)
#source("http://bioconductor.org/biocLite.R")
#biocLite("WGCNA")
library(WGCNA)
#install.packages("devtools")
library(devtools)
#install.packages("corrplot")
library(corrplot)
#install.packages("fdrtool")
library(fdrtool)
#source("http://bioconductor.org/biocLite.R")
#biocLite("preprocessCore")
library("preprocessCore")
bgig <- read_csv("~/Work/osteoblast_project/wgcna_network/bmd_gwas_implicated_genes.csv")
head(bgig)
ebmd_genes <- read_csv("~/Work/osteoblast_project/wgcna_network/ebmd_info/human_ebmd_genes.csv")
human_nmtogene <- read_csv("~/Work/osteoblast_project/wgcna_network/human_refseq_to_gene_name.txt")
head(human_nmtogene)
colnames(human_nmtogene) <- c("ens_id", "gene_name", "refseq_id")
bgig_ids <- human_nmtogene %>%
filter(refseq_id %in% bgig$name)
length(unique(bgig_ids$gene_name))
bgig_ids$study = "bgig"
ebmd_ids <- human_nmtogene %>%
filter(gene_name %in% ebmd_genes$`unique(ebmd_genes$name)`)
ebmd_ids$study = "ebmd"
gwas_ids = as.data.frame(rbind(bgig_ids,ebmd_ids))
bgig_ids
ebmd_ids
length(unique(bgig_ids$gene_name))
ebmd_ids
length(unique(ebmd_ids$gene_name))
length(gwas_mouse_hom_genes)
homology <- read_tsv("~/Work/osteoblast_project/wgcna_network/HOM_MouseHumanSequence.txt")
homology <- read_tsv("~/Work/osteoblast_project/wgcna_network/HOM_MouseHumanSequence.txt")
homology
homology
hom_ids <- homology %>%
filter(Symbol %in% gwas_ids$gene_name)
homology
hom_ids <- homology %>%
filter(Symbol %in% gwas_ids$gene_name)
gwas_mouse_hom <- homology %>%
filter(`HomoloGene ID` %in% hom_ids$`HomoloGene ID`) %>%
filter(`NCBI Taxon ID` == 10090)
gwas_mouse_hom_genes <- gwas_mouse_hom$Symbol
length(gwas_mouse_hom_genes)
head(gwas_mouse_hom_genes)
gwas_mouse_hom_genes = as.vector(gwas_mouse_hom_genes)
gwas_mouse_hom_genes
length(gwas_mouse_hom_genes)
install.packages("devtools")
library(devtools)
install_github("oliviasabik/mirrorplot")
library(mirrorplot)
library(devtools)
install_github("oliviasabik/mirrorplot")
install("./Work/test_mirrorplot/mirrorplot/")
library(mirrorplot)
single_plot_function()
library(devtools)
install("./Work/test_mirrorplot/mirrorplot/")
setwd("~/Work/mirror_plot_package/")
library(devtools)
# install.packages("roxygen2")
library(roxygen2)
library(tidyverse)
#install.packages("ggpubr")
library(ggpubr)
#install.packages("settings")
library(settings)
#devtools::create("mirrorplot")
#toy_pvalues = read_csv("./toy_pvalues.csv")
# mirrorplot::single_plot_function(toy_pvalues)
load("../osteoblast_project/figure_data/b4galnt3_eqtl")
load("../osteoblast_project/figure_data/b4galnt3_gwas")
colnames(b4galnt3_eqtl) = c("RS_ID", "GENE_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "BUILD", "TSS_DIST", "MA_SA", "MA_CO",
"MAF", "P", "SLOPE", "SLOPE_SE", "LD")
colnames(b4galnt3_gwas) = c("RS_ID", "SNP_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "A1FREQ", "INFO", "BETA", "SE", "P",
"N", "LD")
b4galnt3_eqtl$LOG10P = -log10(b4galnt3_eqtl$P)
b4galnt3_gwas$LOG10P = -log10(b4galnt3_gwas$P)
b4galnt3_gwas = b4galnt3_gwas[,-c(14,15)]
load("../osteoblast_project/figure_data/cadm1_eqtl")
load("../osteoblast_project/figure_data/cadm1_gwas")
colnames(cadm1_eqtl) = c("RS_ID", "GENE_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "BUILD", "TSS_DIST", "MA_SA", "MA_CO",
"MAF", "P", "SLOPE", "SLOPE_SE", "LD")
colnames(cadm1_gwas) = c("RS_ID", "SNP_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "A1FREQ", "INFO", "BETA", "SE", "P",
"N", "LD")
cadm1_eqtl$LOG10P = -log10(cadm1_eqtl$P)
cadm1_gwas$LOG10P = -log10(cadm1_gwas$P)
b4galnt3_gwas_no_ld = b4galnt3_gwas[,-13]
cadm1_gwas_no_ld = cadm1_gwas[,-13]
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot)
mirrorplot::single_plot_function(b4galnt3_gwas_no_ld, chr = 12, rs_id = NULL, pops = NULL, 500000, 650000, plotby = "coord")
mirrorplot::single_plot_function(b4galnt3_gwas_no_ld, chr = 12, rs_id = "rs6489548", pops = c("CEU","TSI","FIN","GBR","IBS"),
500000, 650000)
mirrorplot::single_plot_function(cadm1_gwas_no_ld, chr = 11, rs_id = "rs2509353", pops = "CEU", 115390000, 115600000)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
sum(is.null(rs_id_1)) == 1
rs_id_1 = NULL
sum(is.null(rs_id_1)) == 1
rs_id_1 = rs01
rs_id_1 = "rs01"
sum(is.null(rs_id_1)) == 1
sum(is.null(rs_id_1)) == 1
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot
)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
colnames(b4galnt3_eqtl)
colnames(b4galnt3_gwas)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "coord",
"Cadm1 eQTL", "eBMD GWAS", 115390000, 115600000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs6489548", rs_id_2 = "rs6489548")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "snp",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "gene", gene = "CADM1",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas_no_ld, chr = 11, plotby = "gene", gene = "CADM1",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
sum(is.null(rs_id_1)) == 1)
(sum(is.null(rs_id_1)) == 1)
rs_id_1
(sum(is.null(rs_id_1)) == 0)
sum(is.null(rs_id_1)) == 0
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "coord",
"Cadm1 eQTL", "eBMD GWAS", 115390000, 115600000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs6489548", rs_id_2 = "rs6489548")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "snp",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "gene", gene = "CADM1",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas_no_ld, chr = 11, plotby = "gene", gene = "CADM1",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "coord",
"Cadm1 eQTL", "eBMD GWAS", 115390000, 115600000,
pops = NULL, rs_id_1 = NULL, rs_id_2 = NULL)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas, chr = 12, plotby = "coord",
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs6489548", rs_id_2 = "rs6489548")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "snp",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas, chr = 11, plotby = "gene", gene = "CADM1",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas_no_ld, chr = 11, plotby = "gene", gene = "CADM1",
"Cadm1 eQTL", "eBMD GWAS",
pops = c("CEU","TSI","FIN","GBR","IBS"),
rs_id_1 = "rs2509353", rs_id_2 = "rs2509353")
