"chromosome", "MMpurple", "GSValue", "gwas", "novel_known", "cluster")
cluster2$gwas[12] = TRUE
cluster2$MMpurple = as.numeric(cluster2$MMpurple)
size = ifelse(cluster2$gwas == "TRUE", 2, 1)
ggplot(cluster2[1:21,], aes(x = reorder(trx_name, MMpurple), y = MMpurple, color = cluster)) +
geom_bar(stat = "identity", size = 1, width = 0.7, fill = "grey") + theme_bw() +
scale_color_manual(values=c("white")) +
coord_flip(ylim = c(0.75,0.875)) +
xlab("Hub Gene") +
ylab("Connectivity (Module Membership Score)")
ggplot(cluster2[1:21,], aes(x = reorder(trx_name, MMpurple), y = MMpurple, color = cluster, fill = novel_known)) +
geom_bar(stat = "identity", size = 1, width = 0.7) + theme_bw() +
scale_color_manual(values=c("white")) +
scale_fill_manual(values=c("grey", "royalblue")) +
coord_flip(ylim = c(0.75,0.875)) +
xlab("Hub Gene") +
ylab("Connectivity (Module Membership Score)")
ggplot(cluster2[1:21,], aes(x = reorder(trx_name, MMpurple), y = MMpurple, fill = novel_known, color = gwas)) +
geom_bar(stat = "identity", size = 1, width = 0.7) + theme_bw() +
scale_color_manual(values=c("white", "red")) +
scale_fill_manual(values=c("grey", "royalblue")) +
coord_flip(ylim = c(0.75,0.875)) +
xlab("Hub Gene") +
ylab("Connectivity (Module Membership Score)")
#Filter out late ob cluster genes from expression matrix
cluster2$trx_id
#Filter out late ob cluster genes from expression matrix
exp_by_strain_29k
#Filter out late ob cluster genes from expression matrix
select(exp_by_strain_29k, cluster2$trx_id)
#Filter out late ob cluster genes from expression matrix
rownames(exp_by_strain_29k) = exp_by_strain_29k$strain
exp_by_strain_29k
select(exp_by_strain_29k, cluster2$trx_id)
select(exp_by_strain_29k, c("strain", cluster2$trx_id)
select(exp_by_strain_29k, c("strain", cluster2$trx_id))
column_names = c("strain", cluster2$trx_id)
select(exp_by_strain_29k, column_names)
# Late diff cluster
MEcluster2
late_ob_cluster_exp = select(exp_by_strain_29k, column_names)
cor(MEcluster2, late_ob_cluster_exp$ENSMUST00000163888)
cor(MEcluster2, late_ob_cluster_exp)
cor(MEcluster2, late_ob_cluster_exp[,-1])
late_ob_cluster_exp[,-1]
late_ob_cluster_exp
MEcluster2
cor(MEcluster2$MEpurple, late_ob_cluster_exp[,-1])
as.vectors(cor(MEcluster2$MEpurple, late_ob_cluster_exp[,-1]))
as.vector(cor(MEcluster2$MEpurple, late_ob_cluster_exp[,-1]))
as.vector(colnames(late_ob_cluster_exp))
as.vector(cor(MEcluster2$MEpurple, late_ob_cluster_exp[,-1]))
as.vector(colnames(late_ob_cluster_exp[,-1]))
as.vector(colnames(late_ob_cluster_exp[,-1]))
as.vector(cor(MEcluster2$MEpurple, late_ob_cluster_exp[,-1]))
a = as.vector(colnames(late_ob_cluster_exp[,-1]))
b = as.vector(cor(MEcluster2$MEpurple, late_ob_cluster_exp[,-1]))
as.data.frame(cbind(a,b))
c = as.data.frame(cbind(a,b))
late_ob_cluster_exp
cluster2
colnames(c) =
cluster2$trx_id == b
b
colnames(c) =
cluster2$trx_id == a
cluster2$trx_
cluster2$trx_id
a
cluster2$trx_id == a
colnames(c) =
table(cluster2$trx_id == a)
colnames(c) =
table(cluster2$trx_id == a)
colnames(c) =
table(cluster2$trx_id == a)
colnames(c)
c = as.data.frame(cbind(a,b))
c
cluster2
cluster2$MMcluster2 = b
cluster2
arrange(cluster2, MMcluster2)
arrange(cluster2, desc(MMcluster2))
arrange(cluster2, desc(MMcluster2))
setwd("~/Work/osteoblast_project/cheryls_data/")
library(tidyverse)
library("preprocessCore")
#install.packages("GGally")
library(GGally)
library(WGCNA)
arrange(cluster2, desc(MMcluster2))
cluster2_plot = arrange(cluster2, desc(MMcluster2))
ggplot(cluster2_plot[1:30,], aes(x = reorder(trx_name, MMpurple), y = MMpurple, fill = novel_known, color = gwas)) +
geom_bar(stat = "identity", size = 1, width = 0.7) + theme_bw() +
scale_color_manual(values=c("white", "red")) +
scale_fill_manual(values=c("grey", "royalblue")) +
coord_flip(ylim = c(0.75,0.875)) +
xlab("Hub Gene") +
ylab("Connectivity (Module Membership Score)")
cluster2_plot = arrange(cluster2, desc(MMcluster2))
ggplot(cluster2_plot[1:30,], aes(x = reorder(trx_name, MMcluster2), y = MMcluster2, fill = novel_known, color = gwas)) +
geom_bar(stat = "identity", size = 1, width = 0.7) + theme_bw() +
scale_color_manual(values=c("white", "red")) +
scale_fill_manual(values=c("grey", "royalblue")) +
coord_flip(ylim = c(0.75,0.875)) +
xlab("Hub Gene") +
ylab("Connectivity (Module Membership Score)")
# write_tsv(random_sets, "./random_set_data/random_rsids.txt")
read_tsv(random_sets, "./random_set_data/random_rsids.txt")
# write_tsv(random_sets, "./random_set_data/random_rsids.txt")
read_tsv("./random_set_data/random_rsids.txt")
install.packages(haploR)
install.packages("haploR" )
library(haploR)
random_sets
# write_tsv(random_sets, "./random_set_data/random_rsids.txt")
random_sets = read_tsv("./random_set_data/random_rsids.txt")
queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = EUR, verbose = TRUE)
queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = "EUR", verbose = TRUE)
queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = "EUR", verbose = TRUE) %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = min(chr))
queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = "EUR", verbose = TRUE) %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = chr)
x = queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = "EUR", verbose = TRUE) %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = chr)
x = queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = "EUR", verbose = TRUE)
x$pos_hg38 = as.numeric(x$pos_hg38)
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = chr)
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = min(chr))
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = max(chr))
x
# write_tsv(random_sets, "./random_set_data/random_rsids.txt")
random_sets = read_tsv("./random_set_data/random_rsids.txt")
x = queryHaploreg(query = random_sets$set_1, file = NULL, study = NULL, ldThresh = 1.0, ldPop = "EUR", verbose = TRUE)
x$chr = as.numeric(as.character(x$chr))
x$pos_hg38 = as.numeric(as.character(x$pos_hg38))
x
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = max(chr))
subset(x, x$query_snp_rsid == "rs7916926")
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = max(chr))
subset(x, x$query_snp_rsid == "rs6650327")
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = max(chr))
subset(x, x$query_snp_rsid == "rs7916926")
x %>%
group_by(query_snp_rsid) %>%
summarize(minCoord = min(pos_hg38), maxCoord = max(pos_hg38),
chr = max(chr))
library(devtools)
install_github(slowkow/proxysnps)
install_github("slowkow/proxysnps")
library("proxysnps")
proxysnps::getproxies(query = random_sets$set_1)
proxysnps::get_proxies(query = random_sets$set_1)
install.packages("myvariant")
install_github("slowkow/proxysnps")
setme <-
"Sys.setenv(TZ='America/New_York') #some default not get any errors
setme <-
Sys.setenv(TZ='America/New_York') #some default not get any errors
setme <-
Sys.setenv(TZ='America/New_York')
invisible(loadNamespace('rgeolocate'))
invisible(loadNamespace('httr'))
mytz <- rgeolocate::ip_api(httr::content(httr::GET('https://api.ipify.org?format=json'))[1])[['timezone']]
Sys.setenv(TZ=mytz)
cat(setme,file=file.path(R.home(),'etc/Rprofile.site'),sep='\n')
cat(setme,file=file.path(R.home(),'etc/Rprofile.site'),sep='\n')
install_github("slowkow/proxysnps")
cat(setme,file=file.path(R.home(),'etc/Rprofile.site'),sep='\n'))
setme <-
Sys.setenv(TZ='America/New_York')
invisible(loadNamespace('rgeolocate'))
invisible(loadNamespace('httr'))
setme <-
Sys.setenv(TZ='America/New_York')
invisible(loadNamespace('rgeolocate'))
invisible(loadNamespace('httr'))
mytz <- rgeolocate::ip_api(httr::content(httr::GET('https://api.ipify.org?format=json'))[1])[['timezone']]
Sys.setenv(TZ=mytz)
cat(setme,file=file.path(R.home(),'etc/Rprofile.site'),sep='\n'))
library("Rgeolocate")
install.packages("Rgeolocate")
install.packages("rgeolocate")
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
head(H3K27ac)
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
library(GenomicRanges)
library(devtools)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
head(H3K27ac)
#hg19 annotation
ld1 = read_csv("./gwas_lead_snps.txt")
#hg19 annotation
gwas_snps = read_csv("./gwas_lead_snps.txt")
#hg19 annotation
gwas_snps = read_tsv("./gwas_lead_snps.txt")
length(gwas_snps$chr)
length(gwas_snps$rs_id)
length(gwas_snps$chr)
gwas_snps$chr
ld1 = proxysnps::get_proxies(query = gwas_snps$rs_id)
install.packages("myvariant")
install.packages(haploR, dependencies = TRUE)
install.packages("haploR", dependencies = TRUE)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
library(GenomicRanges)
library(devtools)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
library(tidyverse)
# Dependencies
setwd("~/Work/osteoblast_project/epigenetic_analysis/")
library(tidyverse)
library(GenomicRanges)
library(devtools)
install.packages("haploR", dependencies = TRUE)
library(haploR)
install.packages("haploR", dependencies = TRUE)
library(haploR)
# Reading in Roadmap files for each chromatin mark
# hg19 annotation
files = list.files("./roadmap_data/", pattern = "\\.gappedPeak$")
files
for (i in 1:length(files)){
table = read_tsv(paste0("./roadmap_data/",files[i]), col_names = FALSE)
colnames(table) = c("chrom", "start", "end", "name", "score", "strand", "thick_start", "thick_end", "item_rgb", "block_count", "block_sizes", "block_starts", "signal_value", "p_value", "q_value")
table$chrom = gsub("chr", "", as.character(table$chrom))
table$chrom = gsub("X", "23", as.character(table$chrom))
table = filter(table, chrom != "Y")
mark = substring(files[i], 6,(nchar(files[i]) - 11))
print(mark)
assign(mark, table)
name2 = paste0("gr_",mark)
assign(name2, GRanges(table))
}
setwd("~/Work/osteoblast_project/cheryls_data/")
library(tidyverse)
library("preprocessCore")
#install.packages("GGally")
library(GGally)
library(WGCNA)
cluster_labels = read_csv("./GSE54461_OB_RNA_SEQ_RAW/purple_cluster_trx_label_mart.csv")
colnames(cluster_labels) = c("Gene.ID", "cluster", "Transcript.ID", "gene_name")
purple = read_csv("../wgcna_network/signed_network/MM_gwas_trx_purple.csv")
cluster_trx = merge(purple, cluster_labels, by = "Transcript.ID")
cluster_trx
setwd("~/Work/osteoblast_project/cheryls_data/")
write.csv(cluster_trx, "./purple_trx_with_cluster.csv")
#### Loading in expression matrix ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
# 42 strains x 55262 transcripts
load("~/Work/osteoblast_project/wgcna_network/exp_by_strain_29k.Rdata")
exp_by_strain <- exp_by_strain_29k
rownames(exp_by_strain) <- exp_by_strain$strain
exp_by_strain <- exp_by_strain[,-1]
exp_by_strain[1:5,1:5]
### The output has undergone vst and PEER batch correction
### Here we are doing a quantile normalization, which generally removes
### experimental noise, but the strain differencens remain
norm_exp_by_strain <- normalize.quantiles(as.matrix(exp_by_strain))
colnames(norm_exp_by_strain) <- colnames(exp_by_strain)
rownames(norm_exp_by_strain) <- rownames(exp_by_strain)
norm_exp_by_strain[1:5,1:5]
head(colnames(norm_exp_by_strain), 20)
norm_exp_by_strain <- as.data.frame(norm_exp_by_strain)
trx_info <- read.csv("~/Work/osteoblast_project/wgcna_network/trx_mart_export.txt")
head(trx_info)
trx_info_29k <- subset(trx_info, trx_info$Transcript.ID %in% colnames(exp_by_strain))
trx <- (trx_info_29k$Associated.Gene.Name == "Runx2")
subset(trx, trx == TRUE)
# 13883 of 28722 genes are unqiue gene IDs
#### Generate meta data table ####
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
load('~/Work/osteoblast_project/wgcna_network/all_pheno.Rdata')
colnames(all_pheno) <- c('mmAR', 'particle_counts', 'total_area', 'average_size', 'percent_area',
'circularity', 'solidity', 'fivetotwenty', 'weight', 'age', 'cell_yield')
all_pheno$strains <- rownames(all_pheno)
rownames(norm_exp_by_strain) = exp_by_strain_29k$strain
only_42 <- rownames(norm_exp_by_strain)
head(all_pheno)
all_pheno <- subset(all_pheno, all_pheno$strains %in% only_42)
datTraits <- all_pheno
head(datTraits)
cluster_trx$cluster = as.factor(cluster_trx$cluster)
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.25) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
trx_1 = subset(cluster_trx, cluster == 1)
trx_2 = subset(cluster_trx, cluster == 2)
mean(cluster_trx$MMpurple)
t.test(trx_1$MMpurple, trx_2$MMpurple)
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.7) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5, colour = cluster) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5, aes(colour = cluster)) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.5) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.45) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
ggplot(cluster_trx, aes(cluster, MMpurple, group = cluster)) +
theme_bw() + geom_boxplot(aes(fill = cluster)) +
geom_jitter(width = 0.4, alpha = 0.40) +
#geom_dotplot(binaxis='y', stackdir='center', dotsize=0.5) +
scale_fill_manual(values = c("orange", "blue")
, labels = c("1" = "Early Differentiation Cluster", "2" = "Late Differentiation Cluster"))
setwd("~/Work/mirror_plot_package/")
library(devtools)
# install.packages("roxygen2")
library(roxygen2)
library(tidyverse)
#install.packages("ggpubr")
library(ggpubr)
#toy_pvalues = read_csv("./toy_pvalues.csv")
# mirrorplot::single_plot_function(toy_pvalues)
load("../osteoblast_project/figure_data/b4galnt3_eqtl")
load("../osteoblast_project/figure_data/b4galnt3_gwas")
colnames(b4galnt3_eqtl) = c("RS_ID", "GENE_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "BUILD", "TSS_DIST", "MA_SA", "MA_CO",
"MAF", "P", "SLOPE", "SLOPE_SE", "LD")
colnames(b4galnt3_gwas) = c("RS_ID", "SNP_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "A1FREQ", "INFO", "BETA", "SE", "P",
"N", "LD")
b4galnt3_eqtl$LOG10P = -log10(b4galnt3_eqtl$P)
b4galnt3_gwas$LOG10P = -log10(b4galnt3_gwas$P)
b4galnt3_gwas = b4galnt3_gwas[,-c(14,15)]
load("../osteoblast_project/figure_data/cadm1_eqtl")
load("../osteoblast_project/figure_data/cadm1_gwas")
colnames(cadm1_eqtl) = c("RS_ID", "GENE_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "BUILD", "TSS_DIST", "MA_SA", "MA_CO",
"MAF", "P", "SLOPE", "SLOPE_SE", "LD")
colnames(cadm1_gwas) = c("RS_ID", "SNP_ID", "CHR", "CHR_POS", "ALLELE1",
"ALLELE0", "A1FREQ", "INFO", "BETA", "SE", "P",
"N", "LD")
cadm1_eqtl$LOG10P = -log10(cadm1_eqtl$P)
cadm1_gwas$LOG10P = -log10(cadm1_gwas$P)
setwd("~/Work/mirror_plot_package/")
document()
install("../mirror_plot_package/")
library(mirrorplot)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas,
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115400000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(b4galnt3_eqtl, b4galnt3_gwas,
"B4galnt3 eQTL", "eBMD GWAS", 500000, 650000,
rsid_1 = "rs6489548", rsid_2 = "rs6489548" )
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115400000, 115600000,
rsid_1 = "rs2509353", rsid_2 = "rs2509353")
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115400000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115000000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115100000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115200000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115250000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115400000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115350000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
mirrorplot::mirror_plot_function(cadm1_eqtl, cadm1_gwas,
"Cadm1 eQTL", "eBMD GWAS", 115390000, 115600000,
rsid_1 = NULL, rsid_2 = NULL)
